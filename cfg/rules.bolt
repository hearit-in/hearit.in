room(roomId) {
	root.rooms[roomId]
}

isAdminOf(uid, roomId) {
	room(roomId).admins[uid] != null
}

isCurrentUserAdminOf(roomId) {
	isAdminOf(auth.uid, roomId)
}

isSameTrack(a, b) {
	a.provider   == b.provider &&
	a.providerId == b.providerId
}

wasEmpty(ref) {
	prior(ref) == null
}

isKey(val) {
	key() == val
}

// Returns true if the value is intialized to init, or if it retains it's prior
// value, otherwise.
initial(value, init) {
	value == (
		prior(value) == null
			? init
			: prior(value)
	)
}

path / {
	read() { true }
}

path /rooms/{roomId} {
	write() { wasEmpty(this) }

	path /admins {
		write() { wasEmpty(this) }
		
		path /{uid} {
			write() { isCurrentUserAdminOf(roomId) }
		}
	}

	path /settings {
		write() { isCurrentUserAdminOf(roomId) }
	}

	path /adminRequests is AdminRequest[] {
		write() {
			   key() == auth.uid
			|| isCurrentUserAdminOf(roomId)
		}
	}

	path /nowPlaying is NowPlayingTrack {
		write() { true }
	}
	
	path /spotifyPlaylistId {
		write() { true }
	}

	path /history {
		write() { true }
	}

	path /queue is QueuedTrack[] {
		write() {
			true
		}
	}
}

type AdminRequest extends String {
	validate() {
		isKey(auth.uid) || isCurrentUserAdminOf(roomId)
	}
}

type Vote {
	validate() {
		isKey(auth.uid)
	}
}

type Timestamp extends Number {
}

type InitialTimestamp extends Timestamp {
	validate() { initial(this, now) }
}

type Images {
	small: String,
	medium: String,
	large: String
}

// TODO: Don't store ID twice, it's already the key.
type Track {
	id: String|Null,
	name: String,
	artist: String,
	album: Any,
	provider: String,
	providerId: String,
	images: Images
}

type QueuedTrack extends Track {
	votes: Vote[],
	queuedAt: InitialTimestamp
}

type HistoryTrack extends Track {
	playedAt: Number
}

type NowPlayingTrack extends HistoryTrack {
	
}