room(roomId) {
	root.rooms[roomId]
}

isAdminOf(uid, roomId) {
	room(roomId).admins[uid] != null
}

isCurrentUserAdminOf(roomId) {
	isAdminOf(auth.uid, roomId)
}

isSameTrack(a, b) {
	a.provider   == b.provider &&
	a.providerId == b.providerId
}

wasEmpty(ref) {
	prior(ref) == null
}

path / {
	read() { true }
}

path /rooms/{roomId} {
	write() { wasEmpty(this) }

	path /admins {
		write() { wasEmpty(this) }
		path /{uid} {
			write() { isCurrentUserAdminOf(roomId) }
		}
	}
	
	path /settings {
		write() { isCurrentUserAdminOf(roomId) }
	}

	path /adminRequests/{uid} {
		write() { true }
	}

	path /nowPlaying is Track {
		write() { true }
	}

	path /history {
		write() { true }
	}

	path /queue/{trackId} {
		write() {
			true
		}

		path /votes/{uid} {
			write() {
				true
			}
			validate() {
				auth.uid == uid
			}
		}
	}
}

type AdminRequest extends String {
	validate() {
		key() == auth.uid && !isCurrentUserAdminOf(roomId)
	}
}

type Track {

}
